"""CSC111 Project 1: Text Adventure Game - Game Manager

Instructions (READ THIS FIRST!)
===============================

This Python module contains the code for Project 1. Please consult
the project handout for instructions and details.

Copyright and Usage Information
===============================

This file is provided solely for the personal and private use of students
taking CSC111 at the University of Toronto St. George campus. All forms of
distribution of this code, whether as given or with any changes, are
expressly prohibited. For more information on copyright for CSC111 materials,
please consult our Course Syllabus.

This file is Copyright (c) 2025 CSC111 Teaching Team
"""
from __future__ import annotations

import json
from typing import Optional

from game_entities import Item, Location
from proj1_event_logger import Event, EventList

from dataclasses import dataclass
# Note: You may add in other import statements here as needed

# Note: You may add helper functions, classes, etc. below as needed
@dataclass()
class GameState:
    """The whole statement at the specific moment."""
    loc_id: int
    inventory: list[str]
    item_positions: dict[str, int]

class AdventureGame:
    """A text adventure game class storing all location, item and map data.

    Instance Attributes:
        - _locations: a mapping from location id to Location object. This represents all the locations in the game.
        - _items: a list of Item objects, representing all items in the game.
        - current_location_id: The ID of the current location.
        - ongoing: Whether the game is active (True) or ended (False).
        - visited_locations: A set of location IDs the player has visited. Determines whether to show brief or full
        descriptions of locations.
        - inventory: A list of item names the player is carrying.
        - item_positions: A dictionary tracking the current location of items. Maps item names to their current location
         ID.

    Representation Invariants:
        - self.current_location_id in self._locations
        - all(loc_id in self._locations for loc_id in self.visited_locations)
        - all(item_name in {item.name for item in self._items} for item_name in self. Inventory)
        - all(item.name in self.item_positions for item in self._items)
        - all(pos in self._locations or pos == -1 for pos in self.item_positions.values())
        - all(item_name in self._locations[pos].items for (item_name, pos) in self.item_positions.items() if pos != -1)
        - all(item_name in self. Inventory for (item_name, pos) in self.item_positions.items() if pos == -1)
        - len(self._locations) == len({loc.id for loc in self._locations.values()})
        - len(self._items) == len({item.name for item in self._items})
    """

    # Private Instance Attributes (do NOT remove these two attributes):
    #   - _locations: a mapping from location id to Location object.
    #                       This represents all the locations in the game.
    #   - _items: a list of Item objects, representing all items in the game.

    _locations: dict[int, Location]
    _items: list[Item]
    current_location_id: int  # Suggested attribute, can be removed
    ongoing: bool  # Suggested attribute, can be removed
    visited_locations: set[int]
    inventory: list[str]
    item_positions: dict[str, int]

    def __init__(self, game_data_file: str, initial_location_id: int) -> None:
        """
        Initialize a new text adventure game, based on the data in the given file, setting starting location of game
        at the given initial location ID.
        (note: you are allowed to modify the format of the file as you see fit)

        Preconditions:
        - game_data_file is the filename of a valid game data JSON file
        """

        # NOTES:
        # You may add parameters/attributes/methods to this class as you see fit.

        # Requirements:
        # 1. Make sure the Location class is used to represent each location.
        # 2. Make sure the Item class is used to represent each item.

        # Suggested helper method (you can remove and load these differently if you wish to do so):
        self._locations, self._items = self._load_game_data(game_data_file)

        # Suggested attributes (you can remove and track these differently if you wish to do so):
        self.current_location_id = initial_location_id  # game begins at this location
        self.ongoing = True  # whether the game is ongoing
        self.inventory = []
        self.visited_locations = set()
        self.item_positions = {
            item.name : item.start_position
            for item in self._items
        }
        self._state_stack: list[GameState] = [self._capture_state()]

    def _capture_state(self) -> GameState:
        """Return the current game statement."""
        return GameState(
            loc_id=self.current_location_id,
            inventory=self.inventory.copy(),
            item_positions=self.item_positions.copy()
        )
    def _record_state(self) -> None:
        """Return the new state to stack."""
        self._state_stack.append(self._capture_state())
        if len(self._state_stack) > 50:
            self._state_stack.pop(0)

    @staticmethod
    def _load_game_data(filename: str) -> tuple[dict[int, Location], list[Item]]:
        """Load locations and items from a JSON file with the given filename and
        return a tuple consisting of (1) a dictionary of locations mapping each game location's ID to a Location object,
        and (2) a list of all Item objects."""

        with open(filename, 'r') as f:
            data = json.load(f)  # This loads all the data from the JSON file

        locations = {}
        for loc_data in data['locations']:  # Go through each element associated with the 'locations' key in the file
            location_obj = Location(loc_data['id'], loc_data['brief_description'], loc_data['long_description'],
                                    loc_data['available_commands'], loc_data['items'])
            locations[loc_data['id']] = location_obj

        items = []
        for item_data in data['items']:
            item = Item(
                name= item_data['name'],
                description= item_data['description'],
                start_position= item_data['start_position'],
                target_position= item_data['target_position'],
                target_points= item_data['target_points'],
                required_item= item_data.get('required_item')
            )
            items.append(item)

        return locations, items

    def get_location(self, loc_id: Optional[int] = None) -> Location:
        """Return Location object associated with the provided location ID.
        If no ID is provided, return the Location object associated with the current location.
        """
        if loc_id is None:
            loc_id = self.current_location_id
        return self._locations[loc_id]

    def _handle_puzzle(self, location: Location, choice: str) -> bool:
        """Return whether the puzzle is solved or not for the current location."""
        if not location.puzzle or location.puzzle['trigger_action'] != choice:
            return False

        required_item = location.puzzle.get('required_item')
        if required_item and required_item not in self.inventory:
            print(f"You need {required_item} to do this!")
            return False

        success = location.puzzle['success']
        print(success.get('message', 'Puzzle solved!'))

        if 'unlock_direction' in success:
            direction = success['unlock_direction']
            target_loc = success.get('target_location')
            location.available_commands[f"go {direction}"] = target_loc

        if 'add_item' in success:
            items = success['add_item']
            items = items if isinstance(items, list) else [items]
            for item_name in items:
                if item_name not in self.inventory:
                    self.inventory.append(item_name)
                    self.item_positions[item_name] = -1

        if 'clue_for' in success:
            clue_loc_id = success['clue_for']
            clue_loc = self._locations[clue_loc_id]
            print(f"You got the clue：{clue_loc.brief_description}")

        location.puzzle = None
        return True

    def _handle_undo(self) -> None:
        """Revert to previous game state"""
        if len(self._state_stack) < 2:
            print("No history to undo")
            return

        self._state_stack.pop()
        prev_state = self._state_stack[-1]

        self.current_location_id = prev_state.loc_id
        self.inventory = prev_state.inventory.copy()
        self.item_positions = prev_state.item_positions.copu()

        curr_loc = self.get_location()
        for item_name, loc_id in prev_state.item_positions.items():
            if loc_id == curr_loc.id and item_name not in curr_loc.items:
                curr_loc.items.append(item_name)
            elif loc_id != curr_loc.id and item_name in curr_loc.items:
                curr_loc.items.remove(item_name)

        if len(self.event_log) > 0:
            self.event_log.remove_last_event()

        print("Undo successful")
        print(f"Current location: {self.get_location().brief_description}")

    def _process_movement(self, new_loc_id: int) -> None:
        """Handle movement logic"""
        if new_loc_id == -1:
            print("No path in this direction")
            return

        self.current_location_id = new_loc_id
        self._record_state()
        current_loc = self.get_location()

        if current_loc.id_num not in self.visited_locations:
            print(current_loc.long_description)
        else:
            print(current_loc.brief_description)

    def _handle_item_interaction(self, command: str) -> None:
        """Handle item pickup/drop interactions."""
        current_loc = self.get_location()
        action, _, item_name = command.partition(' ')
        item_name = item_name.strip().lower()

        item_obj = next((item for item in self._items
                         if item.name == item_name), None)
        if action == "take":
            if not item_obj:
                print(f"⚠️ {item_name} doesn't exist in the game!")
                return
            if item_name not in current_loc.items:
                print(f"⚠️ {item_name} is not available here!")
                return
            if item_obj.required_item and item_obj.required_item not in self.inventory:
                print(f"🔒 You need {item_obj.required_item} to take this!")
                return

            if item_name in self.inventory:
                print(f"ℹ️ You're already carrying {item_name}")
                return

            self.inventory.append(item_name)
            current_loc.items.remove(item_name)
            self.item_positions[item_name] = -1
            print(f"🎒 Added {item_name} to inventory")
            self._record_state()

        elif action == "drop":
            if not item_obj:
                print(f"⚠️ {item_name} doesn't exist in the game!")
                return

            if item_name not in self.inventory:
                print(f"⚠️ You're not carrying {item_name}")
                return

            target_loc = self._locations[item_obj.target_position]
            if current_loc.id_num == target_loc.id_num:
                print(f"⭐ {item_name} scored!")
                self.item_positions[item_name] = current_loc.id_num
            else:
                current_loc.items.append(item_name)
                self.item_positions[item_name] = current_loc.id_num

            self.inventory.remove(item_name)
            print(f"⬇️ Dropped {item_name} at {current_loc.name}")
            self._record_state()

        else:
            print(f"⚠️ Invalid item command: {action}")


if __name__ == "__main__":

    # When you are ready to check your work with python_ta, uncomment the following lines.
    # (Delete the "#" and space before each line.)
    # IMPORTANT: keep this code indented inside the "if __name__ == '__main__'" block
    # import python_ta
    # python_ta.check_all(config={
    #     'max-line-length': 120,
    #     'disable': ['R1705', 'E9998', 'E9999']
    # })

    game_log = EventList()  # This is REQUIRED as one of the baseline requirements
    game = AdventureGame('game_data.json', 1)  # load data, setting initial location ID to 1
    menu = ["look", "inventory", "score", "undo", "log", "quit"]  # Regular menu options available at each location
    choice = None

    # Note: You may modify the code below as needed; the following starter code is just a suggestion
    while game.ongoing:
        current_loc = game.get_location()
        location = game.get_location()
        event = Event(
            id_num=current_loc.id_num,
            description=current_loc.long_description
        )
        game_log.add_event(event, command=choice)

        if current_loc.id_num not in game.visited_locations:
            print(current_loc.long_description)
            game.visited_locations.add(current_loc.id_num)
        else:
            print(current_loc.brief_description)

        print("\nAvailable commands:", ", ".join(menu))
        print("Location-specific commands:")
        for cmd in current_loc.available_commands:
            print(f"- {cmd}")
        if current_loc.puzzle:
            print(f"- {current_loc.puzzle['trigger_action']} (puzzle action)")

        choice = input("\nEnter command: ").lower().strip()
        while (choice not in menu and
               choice not in current_loc.available_commands and
               not (current_loc.puzzle and choice == current_loc.puzzle['trigger_action'])):
            print("Invalid command! Try again.")
            choice = input("Enter command: ").lower().strip()

        print("========")
        print("Action taken:", choice)

        print("What to do? Choose from: look, inventory, score, undo, log, quit")
        print("At this location, you can also:")
        for action in location.available_commands:
            print("-", action)

        choice = input("\nEnter action: ").lower().strip()
        while choice not in location.available_commands and choice not in menu:
            print("That was an invalid option; try again.")
            choice = input("\nEnter action: ").lower().strip()

        print("========")
        print("You decided to:", choice)

        if choice in menu:
            if choice == "look":
                print(current_loc.long_description)
            elif choice == "inventory":
                print("Inventory:", ", ".join(game.inventory) if game.inventory else "Empty")
            elif choice == "score":
                print("Current score:", game._update_score())
            elif choice == "undo":
                game._handle_undo()
            elif choice == "log":
                game_log.display_events()
            elif choice == "quit":
                print("Exiting game...")
                game.ongoing = False
        else:
            result = location.available_commands[choice]
            game.current_location_id = result
            if game._update_score() >= 100:
                print("=== VICTORY ===")
                game.ongoing = False
            elif len(game_log.get_id_log()) >= 50:
                print("=== GAME OVER - Move limit reached ===")
                game.ongoing = False

